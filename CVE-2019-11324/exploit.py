import urllib3

# Suppress SSL warnings to simulate insecure behavior
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# URL of the HTTPS server in Docker
malicious_url = "https://https-server"  # Using the Docker service name for https-server

# Create a PoolManager with an incorrect SSL context or CA cert to simulate the vulnerability
http = urllib3.PoolManager(
    cert_reqs="CERT_REQUIRED",  # Instead of 'CERT_REQUIRED'
    ca_certs="self_signed_cert.pem"  # Using the self-signed certificate
)

# Send a GET request to the target server
response = http.request('GET', malicious_url)

# Display the response to verify if the connection succeeded
print("Exploit executed. Connection established without proper SSL verification.")
print("Response status:", response.status)
print("Response data:", response.data.decode('utf-8'))
